#!/bin/bash +x

# Name: kerbs - KernelBuildSetup tool. 

# Comment: This script is provided as a convenience only, if in doubt perform it's constituent parts manually.

# Author: Rob Thatcher 2013  

VERSION='0.1'

#TODO
#
# Add -i | --interactive - To allow command line variable setting interactively
# Add -f | --force-apt - To force apt-get update
# Add -h | --help - To display usage flags
# Add -d | --deploy - To make the dpkg install of the kernel happen

# Initial Simple Command line arg handling

# Check for reset flag on cmd parameter to remove logs and locks						# DEBUG
clear 
echo -e "\nChecking for reset.\n"										# DEBUG
case $1	in													# DEBUG
	-r|--reset)												# DEBUG
		echo -e "Clearing any log files and lockfiles from tmp\n" 					# DEBUG
		rm /tmp/kerbs_*	2> /dev/null									# DEBUG
		exit 0;;											# DEBUG
	*)													# DEBUG
		echo -e "No reset flag, continuing...\n" ;;							# DEBUG
esac
sleep 2	

# Read multiple command line args (array?) 
# and act on contents

# Vars - Vars

#if -i | -- interactive
# read from stdin to set vars

#Max number of make jobs CPU can handle
MAX_CPU=`cat /proc/cpuinfo | grep processor | wc -l`
#Architechture Type
MACH_TYPE=`uname -m`

echo -e "Max make jobs, based on number of CPUs = $MAX_CPU, Arch Type = $MACH_TYPE\n"
sleep 3

#Kernel Customname
CUSTOMNAME=robt.00

#else programmatically set 
#then export  

# Lockfile and banner - Establish a lock to avoid overuse of apt-get and show banner
date=`date +%d%m%y`
lockfile="/tmp/kerbs_lock.$date.lck"
clear
echo -e "\n\t Kerbs - KernelBuildSetup Tools - Rob Thatcher @2013 http://robthatcher.net\n"
echo -e "1 : make x86_64_defconfig && make menuconfig"
echo -e "2 : fakeroot make-kpkg clean"
echo -e "3 : fakeroot make-kpkg --initrd --append-to-version=-$CUSTOMNAME kernel_image kernel_headers modules_image"
echo -e "4 : cd .. && sudo dpkg -i xxxxxxxxx.deb; don't forget to sudo update-grub\n"
echo -e "\tN.B. use 'sudo apt-get purge linux-image-.x.x.x*' to remove\n"
sleep 1
echo -e "Lockfile set as $lockfile\n" 										# DEBUG
sleep 1

# Build environment - Customise build environment, this is driven by the var section
export CONCURRENCY_LEVEL=$MAX_CPU
export CHOST="x86_64-pc-Linux-gnu"
export CFLAGS="march=native -O2 -pipe -msse -msse2 -mmmx"
export CXXFLAGS="$CFLAGS"

echo -e "\nSetting build flags 'CONCURRENCY_LEVEL' 'CHOST' 'CFLAGS' and 'CXXFLAGS'\n"
echo -e "Build using : \n\t $MAX_CPU cores, $MACH_TYPE O2 pipe SSE SSE2 MMX \n\t(CPU capabilities @ http://ark.intel.com)\n"
echo -e "Checking for build pre-requisites...\n"

# If there is a lock file, setup already ran today, else clear old lockfiles, apt-get update && upgrade, then set lockfile.
if [ -f $lockfile ]; then

	echo -e "Build and install tools already updated today, setup complete.\n"

else
	if [ -f /tmp/kerbs_lock.*.lck ]; then

		echo -e "Cleaning old lock files..\n"
		rm /tmp/kerbs_lock.*.lck 									# Remove old lock files

	else

		echo -e "Installing Debian style build pre-requisites as needed :\n"
		echo -e "\tbuild-essential\n\tkernel-package\n\tlibncurses5-dev\n\tfakeroot\n\twget\n\tbzip2\n"
		echo -e "You are prompted for your password to run apt-get using sudo as required\n"

		#echo "DEBUG MESSAGE apt-get step would occur here DEBUG MESSAGE"

		sudo apt-get -q update  									# Commented during dev 
		sudo apt-get -q install build-essential kernel-package libncurses5-dev fakeroot wget bzip2     # Commented during dev
	
		echo -e "This is the KernelBuildSetup (kerbs) script lock file, remove it to force an apt-get update" > $lockfile
	fi
fi

#Main steps to run build stages,  i.e. make x86_64_defconfig && make menuconfig etc...
echo -e "\nRunning Stage 1a\n\n--> 'make x86_64_defconfig' - no interaction required\n"
sleep 3
make x86_64_defconfig 2>&1 > /tmp/kerbs_x86_64_deconfig.log

echo -e "\nRunning Stage 1b\n\n--> 'make menuconfig' - tune your kernel selections and save as .config\n"
sleep 3
make menuconfig 2> /tmp/kerbs_menuconfig.log

echo -e "\nRunning Stage 2\n\n--> 'fakeroot make-kpkg clean'\n"
sleep 3
fakeroot make-kpkg clean 2>&1 > /tmp/kerbs_fr0_make-kpkg_clean.log

echo -e "\nRunning Stage 3\n\n--> 'fakeroot make-kpkg --initrd --append-to-version=-$CUSTOMNAME kernel_image kernel_headers modules_image'\n\n\tN.B. This will take some time.... coffee?\n"
sleep 3

#echo "DEBUG MESSAGE Full build would occur here.. DEBUG MESSAGE"
#sleep 3

fakeroot make-kpkg --initrd --append-to-version=-$CUSTOMNAME kernel_image kernel_headers modules_image 2>&1 > /tmp/kerbs_fr1_full.log

echo -e "\nN.B. Executed Stages 1, 2 and 3 using kerbs, please check logs files in /tmp\n"
echo -e "1 : make x86_64_defconfig && make menuconfig"
echo -e "2 : fakeroot make-kpkg clean"
echo -e "3 : fakeroot make-kpkg --initrd --append-to-version=-$CUSTOMNAME kernel_image kernel_headers modules_image"
echo -e "\nThe last stage should be performed manually when you are happy, see tips below."
echo -e "\n4 : cd .. && sudo dpkg -i xxxxxxxxx.deb; don't forget to sudo update-grub\n"
echo -e "N.B. use 'sudo apt-get purge linux-image-.x.x.x*' to remove\n"

### END

